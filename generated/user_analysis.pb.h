// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: user_analysis.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_user_5fanalysis_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_user_5fanalysis_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_user_5fanalysis_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_user_5fanalysis_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_user_5fanalysis_2eproto;
namespace user_analysis {
class CategoryCount;
class CategoryCountDefaultTypeInternal;
extern CategoryCountDefaultTypeInternal _CategoryCount_default_instance_;
class GetTaskRequest;
class GetTaskRequestDefaultTypeInternal;
extern GetTaskRequestDefaultTypeInternal _GetTaskRequest_default_instance_;
class SubmitResultResponse;
class SubmitResultResponseDefaultTypeInternal;
extern SubmitResultResponseDefaultTypeInternal _SubmitResultResponse_default_instance_;
class Task;
class TaskDefaultTypeInternal;
extern TaskDefaultTypeInternal _Task_default_instance_;
class TaskResult;
class TaskResultDefaultTypeInternal;
extern TaskResultDefaultTypeInternal _TaskResult_default_instance_;
}  // namespace user_analysis
PROTOBUF_NAMESPACE_OPEN
template<> ::user_analysis::CategoryCount* Arena::CreateMaybeMessage<::user_analysis::CategoryCount>(Arena*);
template<> ::user_analysis::GetTaskRequest* Arena::CreateMaybeMessage<::user_analysis::GetTaskRequest>(Arena*);
template<> ::user_analysis::SubmitResultResponse* Arena::CreateMaybeMessage<::user_analysis::SubmitResultResponse>(Arena*);
template<> ::user_analysis::Task* Arena::CreateMaybeMessage<::user_analysis::Task>(Arena*);
template<> ::user_analysis::TaskResult* Arena::CreateMaybeMessage<::user_analysis::TaskResult>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace user_analysis {

// ===================================================================

class GetTaskRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:user_analysis.GetTaskRequest) */ {
 public:
  inline GetTaskRequest() : GetTaskRequest(nullptr) {};
  virtual ~GetTaskRequest();

  GetTaskRequest(const GetTaskRequest& from);
  GetTaskRequest(GetTaskRequest&& from) noexcept
    : GetTaskRequest() {
    *this = ::std::move(from);
  }

  inline GetTaskRequest& operator=(const GetTaskRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetTaskRequest& operator=(GetTaskRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetTaskRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetTaskRequest* internal_default_instance() {
    return reinterpret_cast<const GetTaskRequest*>(
               &_GetTaskRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GetTaskRequest& a, GetTaskRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetTaskRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetTaskRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetTaskRequest* New() const final {
    return CreateMaybeMessage<GetTaskRequest>(nullptr);
  }

  GetTaskRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetTaskRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetTaskRequest& from);
  void MergeFrom(const GetTaskRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetTaskRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "user_analysis.GetTaskRequest";
  }
  protected:
  explicit GetTaskRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_user_5fanalysis_2eproto);
    return ::descriptor_table_user_5fanalysis_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:user_analysis.GetTaskRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_user_5fanalysis_2eproto;
};
// -------------------------------------------------------------------

class Task PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:user_analysis.Task) */ {
 public:
  inline Task() : Task(nullptr) {};
  virtual ~Task();

  Task(const Task& from);
  Task(Task&& from) noexcept
    : Task() {
    *this = ::std::move(from);
  }

  inline Task& operator=(const Task& from) {
    CopyFrom(from);
    return *this;
  }
  inline Task& operator=(Task&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Task& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Task* internal_default_instance() {
    return reinterpret_cast<const Task*>(
               &_Task_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Task& a, Task& b) {
    a.Swap(&b);
  }
  inline void Swap(Task* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Task* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Task* New() const final {
    return CreateMaybeMessage<Task>(nullptr);
  }

  Task* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Task>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Task& from);
  void MergeFrom(const Task& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Task* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "user_analysis.Task";
  }
  protected:
  explicit Task(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_user_5fanalysis_2eproto);
    return ::descriptor_table_user_5fanalysis_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kStartUserIdFieldNumber = 2,
    kEndUserIdFieldNumber = 3,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_id(
      std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // int32 start_user_id = 2;
  void clear_start_user_id();
  ::PROTOBUF_NAMESPACE_ID::int32 start_user_id() const;
  void set_start_user_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_start_user_id() const;
  void _internal_set_start_user_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 end_user_id = 3;
  void clear_end_user_id();
  ::PROTOBUF_NAMESPACE_ID::int32 end_user_id() const;
  void set_end_user_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_end_user_id() const;
  void _internal_set_end_user_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:user_analysis.Task)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::int32 start_user_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 end_user_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_user_5fanalysis_2eproto;
};
// -------------------------------------------------------------------

class TaskResult PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:user_analysis.TaskResult) */ {
 public:
  inline TaskResult() : TaskResult(nullptr) {};
  virtual ~TaskResult();

  TaskResult(const TaskResult& from);
  TaskResult(TaskResult&& from) noexcept
    : TaskResult() {
    *this = ::std::move(from);
  }

  inline TaskResult& operator=(const TaskResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline TaskResult& operator=(TaskResult&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TaskResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TaskResult* internal_default_instance() {
    return reinterpret_cast<const TaskResult*>(
               &_TaskResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(TaskResult& a, TaskResult& b) {
    a.Swap(&b);
  }
  inline void Swap(TaskResult* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TaskResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TaskResult* New() const final {
    return CreateMaybeMessage<TaskResult>(nullptr);
  }

  TaskResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TaskResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TaskResult& from);
  void MergeFrom(const TaskResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TaskResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "user_analysis.TaskResult";
  }
  protected:
  explicit TaskResult(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_user_5fanalysis_2eproto);
    return ::descriptor_table_user_5fanalysis_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCategoryCountsFieldNumber = 2,
    kTaskIdFieldNumber = 1,
  };
  // repeated .user_analysis.CategoryCount category_counts = 2;
  int category_counts_size() const;
  private:
  int _internal_category_counts_size() const;
  public:
  void clear_category_counts();
  ::user_analysis::CategoryCount* mutable_category_counts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::user_analysis::CategoryCount >*
      mutable_category_counts();
  private:
  const ::user_analysis::CategoryCount& _internal_category_counts(int index) const;
  ::user_analysis::CategoryCount* _internal_add_category_counts();
  public:
  const ::user_analysis::CategoryCount& category_counts(int index) const;
  ::user_analysis::CategoryCount* add_category_counts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::user_analysis::CategoryCount >&
      category_counts() const;

  // string task_id = 1;
  void clear_task_id();
  const std::string& task_id() const;
  void set_task_id(const std::string& value);
  void set_task_id(std::string&& value);
  void set_task_id(const char* value);
  void set_task_id(const char* value, size_t size);
  std::string* mutable_task_id();
  std::string* release_task_id();
  void set_allocated_task_id(std::string* task_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_task_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_task_id(
      std::string* task_id);
  private:
  const std::string& _internal_task_id() const;
  void _internal_set_task_id(const std::string& value);
  std::string* _internal_mutable_task_id();
  public:

  // @@protoc_insertion_point(class_scope:user_analysis.TaskResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::user_analysis::CategoryCount > category_counts_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr task_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_user_5fanalysis_2eproto;
};
// -------------------------------------------------------------------

class CategoryCount PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:user_analysis.CategoryCount) */ {
 public:
  inline CategoryCount() : CategoryCount(nullptr) {};
  virtual ~CategoryCount();

  CategoryCount(const CategoryCount& from);
  CategoryCount(CategoryCount&& from) noexcept
    : CategoryCount() {
    *this = ::std::move(from);
  }

  inline CategoryCount& operator=(const CategoryCount& from) {
    CopyFrom(from);
    return *this;
  }
  inline CategoryCount& operator=(CategoryCount&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CategoryCount& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CategoryCount* internal_default_instance() {
    return reinterpret_cast<const CategoryCount*>(
               &_CategoryCount_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CategoryCount& a, CategoryCount& b) {
    a.Swap(&b);
  }
  inline void Swap(CategoryCount* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CategoryCount* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CategoryCount* New() const final {
    return CreateMaybeMessage<CategoryCount>(nullptr);
  }

  CategoryCount* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CategoryCount>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CategoryCount& from);
  void MergeFrom(const CategoryCount& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CategoryCount* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "user_analysis.CategoryCount";
  }
  protected:
  explicit CategoryCount(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_user_5fanalysis_2eproto);
    return ::descriptor_table_user_5fanalysis_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCategoryFieldNumber = 1,
    kCountFieldNumber = 2,
  };
  // string category = 1;
  void clear_category();
  const std::string& category() const;
  void set_category(const std::string& value);
  void set_category(std::string&& value);
  void set_category(const char* value);
  void set_category(const char* value, size_t size);
  std::string* mutable_category();
  std::string* release_category();
  void set_allocated_category(std::string* category);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_category();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_category(
      std::string* category);
  private:
  const std::string& _internal_category() const;
  void _internal_set_category(const std::string& value);
  std::string* _internal_mutable_category();
  public:

  // int32 count = 2;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::int32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:user_analysis.CategoryCount)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr category_;
  ::PROTOBUF_NAMESPACE_ID::int32 count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_user_5fanalysis_2eproto;
};
// -------------------------------------------------------------------

class SubmitResultResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:user_analysis.SubmitResultResponse) */ {
 public:
  inline SubmitResultResponse() : SubmitResultResponse(nullptr) {};
  virtual ~SubmitResultResponse();

  SubmitResultResponse(const SubmitResultResponse& from);
  SubmitResultResponse(SubmitResultResponse&& from) noexcept
    : SubmitResultResponse() {
    *this = ::std::move(from);
  }

  inline SubmitResultResponse& operator=(const SubmitResultResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubmitResultResponse& operator=(SubmitResultResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SubmitResultResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SubmitResultResponse* internal_default_instance() {
    return reinterpret_cast<const SubmitResultResponse*>(
               &_SubmitResultResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SubmitResultResponse& a, SubmitResultResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SubmitResultResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubmitResultResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SubmitResultResponse* New() const final {
    return CreateMaybeMessage<SubmitResultResponse>(nullptr);
  }

  SubmitResultResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SubmitResultResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SubmitResultResponse& from);
  void MergeFrom(const SubmitResultResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubmitResultResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "user_analysis.SubmitResultResponse";
  }
  protected:
  explicit SubmitResultResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_user_5fanalysis_2eproto);
    return ::descriptor_table_user_5fanalysis_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuccessFieldNumber = 1,
  };
  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:user_analysis.SubmitResultResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_user_5fanalysis_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GetTaskRequest

// -------------------------------------------------------------------

// Task

// string id = 1;
inline void Task::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Task::id() const {
  // @@protoc_insertion_point(field_get:user_analysis.Task.id)
  return _internal_id();
}
inline void Task::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:user_analysis.Task.id)
}
inline std::string* Task::mutable_id() {
  // @@protoc_insertion_point(field_mutable:user_analysis.Task.id)
  return _internal_mutable_id();
}
inline const std::string& Task::_internal_id() const {
  return id_.Get();
}
inline void Task::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Task::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:user_analysis.Task.id)
}
inline void Task::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:user_analysis.Task.id)
}
inline void Task::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:user_analysis.Task.id)
}
inline std::string* Task::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Task::release_id() {
  // @@protoc_insertion_point(field_release:user_analysis.Task.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Task::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:user_analysis.Task.id)
}
inline std::string* Task::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:user_analysis.Task.id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Task::unsafe_arena_set_allocated_id(
    std::string* id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (id != nullptr) {
    
  } else {
    
  }
  id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:user_analysis.Task.id)
}

// int32 start_user_id = 2;
inline void Task::clear_start_user_id() {
  start_user_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Task::_internal_start_user_id() const {
  return start_user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Task::start_user_id() const {
  // @@protoc_insertion_point(field_get:user_analysis.Task.start_user_id)
  return _internal_start_user_id();
}
inline void Task::_internal_set_start_user_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  start_user_id_ = value;
}
inline void Task::set_start_user_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_start_user_id(value);
  // @@protoc_insertion_point(field_set:user_analysis.Task.start_user_id)
}

// int32 end_user_id = 3;
inline void Task::clear_end_user_id() {
  end_user_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Task::_internal_end_user_id() const {
  return end_user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Task::end_user_id() const {
  // @@protoc_insertion_point(field_get:user_analysis.Task.end_user_id)
  return _internal_end_user_id();
}
inline void Task::_internal_set_end_user_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  end_user_id_ = value;
}
inline void Task::set_end_user_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_end_user_id(value);
  // @@protoc_insertion_point(field_set:user_analysis.Task.end_user_id)
}

// -------------------------------------------------------------------

// TaskResult

// string task_id = 1;
inline void TaskResult::clear_task_id() {
  task_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TaskResult::task_id() const {
  // @@protoc_insertion_point(field_get:user_analysis.TaskResult.task_id)
  return _internal_task_id();
}
inline void TaskResult::set_task_id(const std::string& value) {
  _internal_set_task_id(value);
  // @@protoc_insertion_point(field_set:user_analysis.TaskResult.task_id)
}
inline std::string* TaskResult::mutable_task_id() {
  // @@protoc_insertion_point(field_mutable:user_analysis.TaskResult.task_id)
  return _internal_mutable_task_id();
}
inline const std::string& TaskResult::_internal_task_id() const {
  return task_id_.Get();
}
inline void TaskResult::_internal_set_task_id(const std::string& value) {
  
  task_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TaskResult::set_task_id(std::string&& value) {
  
  task_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:user_analysis.TaskResult.task_id)
}
inline void TaskResult::set_task_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  task_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:user_analysis.TaskResult.task_id)
}
inline void TaskResult::set_task_id(const char* value,
    size_t size) {
  
  task_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:user_analysis.TaskResult.task_id)
}
inline std::string* TaskResult::_internal_mutable_task_id() {
  
  return task_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TaskResult::release_task_id() {
  // @@protoc_insertion_point(field_release:user_analysis.TaskResult.task_id)
  return task_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TaskResult::set_allocated_task_id(std::string* task_id) {
  if (task_id != nullptr) {
    
  } else {
    
  }
  task_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), task_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:user_analysis.TaskResult.task_id)
}
inline std::string* TaskResult::unsafe_arena_release_task_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:user_analysis.TaskResult.task_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return task_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void TaskResult::unsafe_arena_set_allocated_task_id(
    std::string* task_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (task_id != nullptr) {
    
  } else {
    
  }
  task_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      task_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:user_analysis.TaskResult.task_id)
}

// repeated .user_analysis.CategoryCount category_counts = 2;
inline int TaskResult::_internal_category_counts_size() const {
  return category_counts_.size();
}
inline int TaskResult::category_counts_size() const {
  return _internal_category_counts_size();
}
inline void TaskResult::clear_category_counts() {
  category_counts_.Clear();
}
inline ::user_analysis::CategoryCount* TaskResult::mutable_category_counts(int index) {
  // @@protoc_insertion_point(field_mutable:user_analysis.TaskResult.category_counts)
  return category_counts_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::user_analysis::CategoryCount >*
TaskResult::mutable_category_counts() {
  // @@protoc_insertion_point(field_mutable_list:user_analysis.TaskResult.category_counts)
  return &category_counts_;
}
inline const ::user_analysis::CategoryCount& TaskResult::_internal_category_counts(int index) const {
  return category_counts_.Get(index);
}
inline const ::user_analysis::CategoryCount& TaskResult::category_counts(int index) const {
  // @@protoc_insertion_point(field_get:user_analysis.TaskResult.category_counts)
  return _internal_category_counts(index);
}
inline ::user_analysis::CategoryCount* TaskResult::_internal_add_category_counts() {
  return category_counts_.Add();
}
inline ::user_analysis::CategoryCount* TaskResult::add_category_counts() {
  // @@protoc_insertion_point(field_add:user_analysis.TaskResult.category_counts)
  return _internal_add_category_counts();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::user_analysis::CategoryCount >&
TaskResult::category_counts() const {
  // @@protoc_insertion_point(field_list:user_analysis.TaskResult.category_counts)
  return category_counts_;
}

// -------------------------------------------------------------------

// CategoryCount

// string category = 1;
inline void CategoryCount::clear_category() {
  category_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CategoryCount::category() const {
  // @@protoc_insertion_point(field_get:user_analysis.CategoryCount.category)
  return _internal_category();
}
inline void CategoryCount::set_category(const std::string& value) {
  _internal_set_category(value);
  // @@protoc_insertion_point(field_set:user_analysis.CategoryCount.category)
}
inline std::string* CategoryCount::mutable_category() {
  // @@protoc_insertion_point(field_mutable:user_analysis.CategoryCount.category)
  return _internal_mutable_category();
}
inline const std::string& CategoryCount::_internal_category() const {
  return category_.Get();
}
inline void CategoryCount::_internal_set_category(const std::string& value) {
  
  category_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CategoryCount::set_category(std::string&& value) {
  
  category_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:user_analysis.CategoryCount.category)
}
inline void CategoryCount::set_category(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  category_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:user_analysis.CategoryCount.category)
}
inline void CategoryCount::set_category(const char* value,
    size_t size) {
  
  category_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:user_analysis.CategoryCount.category)
}
inline std::string* CategoryCount::_internal_mutable_category() {
  
  return category_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CategoryCount::release_category() {
  // @@protoc_insertion_point(field_release:user_analysis.CategoryCount.category)
  return category_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CategoryCount::set_allocated_category(std::string* category) {
  if (category != nullptr) {
    
  } else {
    
  }
  category_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), category,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:user_analysis.CategoryCount.category)
}
inline std::string* CategoryCount::unsafe_arena_release_category() {
  // @@protoc_insertion_point(field_unsafe_arena_release:user_analysis.CategoryCount.category)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return category_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CategoryCount::unsafe_arena_set_allocated_category(
    std::string* category) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (category != nullptr) {
    
  } else {
    
  }
  category_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      category, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:user_analysis.CategoryCount.category)
}

// int32 count = 2;
inline void CategoryCount::clear_count() {
  count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CategoryCount::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CategoryCount::count() const {
  // @@protoc_insertion_point(field_get:user_analysis.CategoryCount.count)
  return _internal_count();
}
inline void CategoryCount::_internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  count_ = value;
}
inline void CategoryCount::set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:user_analysis.CategoryCount.count)
}

// -------------------------------------------------------------------

// SubmitResultResponse

// bool success = 1;
inline void SubmitResultResponse::clear_success() {
  success_ = false;
}
inline bool SubmitResultResponse::_internal_success() const {
  return success_;
}
inline bool SubmitResultResponse::success() const {
  // @@protoc_insertion_point(field_get:user_analysis.SubmitResultResponse.success)
  return _internal_success();
}
inline void SubmitResultResponse::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void SubmitResultResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:user_analysis.SubmitResultResponse.success)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace user_analysis

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_user_5fanalysis_2eproto
