// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: user_analysis.proto

#include "user_analysis.pb.h"
#include "user_analysis.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace user_analysis {

static const char* UserAnalysisService_method_names[] = {
  "/user_analysis.UserAnalysisService/GetTask",
  "/user_analysis.UserAnalysisService/SubmitResult",
};

std::unique_ptr< UserAnalysisService::Stub> UserAnalysisService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< UserAnalysisService::Stub> stub(new UserAnalysisService::Stub(channel, options));
  return stub;
}

UserAnalysisService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_GetTask_(UserAnalysisService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SubmitResult_(UserAnalysisService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status UserAnalysisService::Stub::GetTask(::grpc::ClientContext* context, const ::user_analysis::GetTaskRequest& request, ::user_analysis::Task* response) {
  return ::grpc::internal::BlockingUnaryCall< ::user_analysis::GetTaskRequest, ::user_analysis::Task, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetTask_, context, request, response);
}

void UserAnalysisService::Stub::async::GetTask(::grpc::ClientContext* context, const ::user_analysis::GetTaskRequest* request, ::user_analysis::Task* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::user_analysis::GetTaskRequest, ::user_analysis::Task, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetTask_, context, request, response, std::move(f));
}

void UserAnalysisService::Stub::async::GetTask(::grpc::ClientContext* context, const ::user_analysis::GetTaskRequest* request, ::user_analysis::Task* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetTask_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::user_analysis::Task>* UserAnalysisService::Stub::PrepareAsyncGetTaskRaw(::grpc::ClientContext* context, const ::user_analysis::GetTaskRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::user_analysis::Task, ::user_analysis::GetTaskRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetTask_, context, request);
}

::grpc::ClientAsyncResponseReader< ::user_analysis::Task>* UserAnalysisService::Stub::AsyncGetTaskRaw(::grpc::ClientContext* context, const ::user_analysis::GetTaskRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetTaskRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status UserAnalysisService::Stub::SubmitResult(::grpc::ClientContext* context, const ::user_analysis::TaskResult& request, ::user_analysis::SubmitResultResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::user_analysis::TaskResult, ::user_analysis::SubmitResultResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SubmitResult_, context, request, response);
}

void UserAnalysisService::Stub::async::SubmitResult(::grpc::ClientContext* context, const ::user_analysis::TaskResult* request, ::user_analysis::SubmitResultResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::user_analysis::TaskResult, ::user_analysis::SubmitResultResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SubmitResult_, context, request, response, std::move(f));
}

void UserAnalysisService::Stub::async::SubmitResult(::grpc::ClientContext* context, const ::user_analysis::TaskResult* request, ::user_analysis::SubmitResultResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SubmitResult_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::user_analysis::SubmitResultResponse>* UserAnalysisService::Stub::PrepareAsyncSubmitResultRaw(::grpc::ClientContext* context, const ::user_analysis::TaskResult& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::user_analysis::SubmitResultResponse, ::user_analysis::TaskResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SubmitResult_, context, request);
}

::grpc::ClientAsyncResponseReader< ::user_analysis::SubmitResultResponse>* UserAnalysisService::Stub::AsyncSubmitResultRaw(::grpc::ClientContext* context, const ::user_analysis::TaskResult& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSubmitResultRaw(context, request, cq);
  result->StartCall();
  return result;
}

UserAnalysisService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UserAnalysisService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< UserAnalysisService::Service, ::user_analysis::GetTaskRequest, ::user_analysis::Task, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](UserAnalysisService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::user_analysis::GetTaskRequest* req,
             ::user_analysis::Task* resp) {
               return service->GetTask(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UserAnalysisService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< UserAnalysisService::Service, ::user_analysis::TaskResult, ::user_analysis::SubmitResultResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](UserAnalysisService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::user_analysis::TaskResult* req,
             ::user_analysis::SubmitResultResponse* resp) {
               return service->SubmitResult(ctx, req, resp);
             }, this)));
}

UserAnalysisService::Service::~Service() {
}

::grpc::Status UserAnalysisService::Service::GetTask(::grpc::ServerContext* context, const ::user_analysis::GetTaskRequest* request, ::user_analysis::Task* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status UserAnalysisService::Service::SubmitResult(::grpc::ServerContext* context, const ::user_analysis::TaskResult* request, ::user_analysis::SubmitResultResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace user_analysis

